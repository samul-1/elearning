(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ContextMenu"] = factory();
	else
		root["ContextMenu"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/abstract_entry.js":
/*!******************************!*\
  !*** ./js/abstract_entry.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractEntry = void 0;

var menu_element_js_1 = __webpack_require__(/*! ./menu_element.js */ "./js/menu_element.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var AbstractEntry = function (_super) {
  __extends(AbstractEntry, _super);

  function AbstractEntry(_menu, _type) {
    var _this = _super.call(this) || this;

    _this._menu = _menu;
    _this._type = _type;
    _this.className = html_classes_js_1.HtmlClasses['MENUITEM'];
    _this.role = 'menuitem';
    _this.hidden = false;
    return _this;
  }

  Object.defineProperty(AbstractEntry.prototype, "menu", {
    get: function get() {
      return this._menu;
    },
    set: function set(menu) {
      this._menu = menu;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AbstractEntry.prototype, "type", {
    get: function get() {
      return this._type;
    },
    enumerable: false,
    configurable: true
  });

  AbstractEntry.prototype.hide = function () {
    this.hidden = true;
    this.menu.generateMenu();
  };

  AbstractEntry.prototype.show = function () {
    this.hidden = false;
    this.menu.generateMenu();
  };

  AbstractEntry.prototype.isHidden = function () {
    return this.hidden;
  };

  return AbstractEntry;
}(menu_element_js_1.MenuElement);

exports.AbstractEntry = AbstractEntry;

/***/ }),

/***/ "./js/abstract_item.js":
/*!*****************************!*\
  !*** ./js/abstract_item.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __values = this && this.__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractItem = void 0;

var abstract_entry_js_1 = __webpack_require__(/*! ./abstract_entry.js */ "./js/abstract_entry.js");

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var AbstractItem = function (_super) {
  __extends(AbstractItem, _super);

  function AbstractItem(menu, type, _content, id) {
    var _this = _super.call(this, menu, type) || this;

    _this._content = _content;
    _this.disabled = false;
    _this.callbacks = [];
    _this._id = id ? id : _content;
    return _this;
  }

  Object.defineProperty(AbstractItem.prototype, "content", {
    get: function get() {
      return this._content;
    },
    set: function set(content) {
      this._content = content;
      this.generateHtml();

      if (this.menu) {
        this.menu.generateHtml();
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AbstractItem.prototype, "id", {
    get: function get() {
      return this._id;
    },
    enumerable: false,
    configurable: true
  });

  AbstractItem.prototype.press = function () {
    if (!this.disabled) {
      this.executeAction();
      this.executeCallbacks_();
    }
  };

  AbstractItem.prototype.executeAction = function () {};

  AbstractItem.prototype.registerCallback = function (func) {
    if (this.callbacks.indexOf(func) === -1) {
      this.callbacks.push(func);
    }
  };

  AbstractItem.prototype.unregisterCallback = function (func) {
    var index = this.callbacks.indexOf(func);

    if (index !== -1) {
      this.callbacks.splice(index, 1);
    }
  };

  AbstractItem.prototype.mousedown = function (event) {
    this.press();
    this.stop(event);
  };

  AbstractItem.prototype.mouseover = function (event) {
    this.focus();
    this.stop(event);
  };

  AbstractItem.prototype.mouseout = function (event) {
    this.deactivate();
    this.stop(event);
  };

  AbstractItem.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    html.setAttribute('aria-disabled', 'false');
    html.textContent = this.content;
  };

  AbstractItem.prototype.activate = function () {
    if (!this.disabled) {
      this.html.classList.add(html_classes_js_1.HtmlClasses['MENUACTIVE']);
    }
  };

  AbstractItem.prototype.deactivate = function () {
    this.html.classList.remove(html_classes_js_1.HtmlClasses['MENUACTIVE']);
  };

  AbstractItem.prototype.focus = function () {
    this.menu.focused = this;

    _super.prototype.focus.call(this);

    this.activate();
  };

  AbstractItem.prototype.unfocus = function () {
    this.deactivate();

    _super.prototype.unfocus.call(this);
  };

  AbstractItem.prototype.escape = function (_event) {
    menu_util_js_1.MenuUtil.close(this);
  };

  AbstractItem.prototype.up = function (event) {
    this.menu.up(event);
  };

  AbstractItem.prototype.down = function (event) {
    this.menu.down(event);
  };

  AbstractItem.prototype.left = function (event) {
    this.menu.left(event);
  };

  AbstractItem.prototype.right = function (event) {
    this.menu.right(event);
  };

  AbstractItem.prototype.space = function (_event) {
    this.press();
  };

  AbstractItem.prototype.disable = function () {
    this.disabled = true;
    var html = this.html;
    html.classList.add(html_classes_js_1.HtmlClasses['MENUDISABLED']);
    html.setAttribute('aria-disabled', 'true');
  };

  AbstractItem.prototype.enable = function () {
    this.disabled = false;
    var html = this.html;
    html.classList.remove(html_classes_js_1.HtmlClasses['MENUDISABLED']);
    html.removeAttribute('aria-disabled');
  };

  AbstractItem.prototype.executeCallbacks_ = function () {
    var e_1, _a;

    try {
      for (var _b = __values(this.callbacks), _c = _b.next(); !_c.done; _c = _b.next()) {
        var func = _c.value;

        try {
          func(this);
        } catch (e) {
          menu_util_js_1.MenuUtil.error(e, 'Callback for menu entry ' + this.id + ' failed.');
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  return AbstractItem;
}(abstract_entry_js_1.AbstractEntry);

exports.AbstractItem = AbstractItem;

/***/ }),

/***/ "./js/abstract_menu.js":
/*!*****************************!*\
  !*** ./js/abstract_menu.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __values = this && this.__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractMenu = void 0;

var abstract_postable_js_1 = __webpack_require__(/*! ./abstract_postable.js */ "./js/abstract_postable.js");

var abstract_item_js_1 = __webpack_require__(/*! ./abstract_item.js */ "./js/abstract_item.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var item_submenu_js_1 = __webpack_require__(/*! ./item_submenu.js */ "./js/item_submenu.js");

var AbstractMenu = function (_super) {
  __extends(AbstractMenu, _super);

  function AbstractMenu() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.className = html_classes_js_1.HtmlClasses['CONTEXTMENU'];
    _this.role = 'menu';
    _this._items = [];
    _this._baseMenu = null;
    return _this;
  }

  Object.defineProperty(AbstractMenu.prototype, "baseMenu", {
    get: function get() {
      return this._baseMenu;
    },
    set: function set(menu) {
      this._baseMenu = menu;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AbstractMenu.prototype, "items", {
    get: function get() {
      return this._items;
    },
    set: function set(items) {
      this._items = items;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AbstractMenu.prototype, "pool", {
    get: function get() {
      return this.variablePool;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AbstractMenu.prototype, "focused", {
    get: function get() {
      return this._focused;
    },
    set: function set(item) {
      if (this._focused === item) {
        return;
      }

      if (!this._focused) {
        this.unfocus();
      }

      var old = this._focused;
      this._focused = item;

      if (old) {
        old.unfocus();
      }
    },
    enumerable: false,
    configurable: true
  });

  AbstractMenu.prototype.up = function (_event) {
    var items = this.items.filter(function (x) {
      return x instanceof abstract_item_js_1.AbstractItem && !x.isHidden();
    });

    if (items.length === 0) {
      return;
    }

    if (!this.focused) {
      items[items.length - 1].focus();
      return;
    }

    var index = items.indexOf(this.focused);

    if (index === -1) {
      return;
    }

    index = index ? --index : items.length - 1;
    items[index].focus();
  };

  AbstractMenu.prototype.down = function (_event) {
    var items = this.items.filter(function (x) {
      return x instanceof abstract_item_js_1.AbstractItem && !x.isHidden();
    });

    if (items.length === 0) {
      return;
    }

    if (!this.focused) {
      items[0].focus();
      return;
    }

    var index = items.indexOf(this.focused);

    if (index === -1) {
      return;
    }

    index++;
    index = index === items.length ? 0 : index;
    items[index].focus();
  };

  AbstractMenu.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    this.generateMenu();
  };

  AbstractMenu.prototype.generateMenu = function () {
    var e_1, _a;

    var html = this.html;
    html.classList.add(html_classes_js_1.HtmlClasses['MENU']);

    try {
      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
        var item = _c.value;

        if (!item.isHidden()) {
          html.appendChild(item.html);
          continue;
        }

        var itemHtml = item.html;

        if (itemHtml.parentNode) {
          itemHtml.parentNode.removeChild(itemHtml);
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  AbstractMenu.prototype.post = function (x, y) {
    this.variablePool.update();

    _super.prototype.post.call(this, x, y);
  };

  AbstractMenu.prototype.unpostSubmenus = function () {
    var e_2, _a;

    var submenus = this.items.filter(function (x) {
      return x instanceof item_submenu_js_1.Submenu;
    });

    try {
      for (var submenus_1 = __values(submenus), submenus_1_1 = submenus_1.next(); !submenus_1_1.done; submenus_1_1 = submenus_1.next()) {
        var submenu = submenus_1_1.value;
        submenu.submenu.unpost();

        if (submenu !== this.focused) {
          submenu.unfocus();
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (submenus_1_1 && !submenus_1_1.done && (_a = submenus_1["return"])) _a.call(submenus_1);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
  };

  AbstractMenu.prototype.unpost = function () {
    _super.prototype.unpost.call(this);

    this.unpostSubmenus();
    this.focused = null;
  };

  AbstractMenu.prototype.find = function (id) {
    var e_3, _a;

    try {
      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
        var item = _c.value;

        if (item.type === 'rule') {
          continue;
        }

        if (item.id === id) {
          return item;
        }

        if (item.type === 'submenu') {
          var result = item.submenu.find(id);

          if (result) {
            return result;
          }
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    return null;
  };

  return AbstractMenu;
}(abstract_postable_js_1.AbstractPostable);

exports.AbstractMenu = AbstractMenu;

/***/ }),

/***/ "./js/abstract_navigatable.js":
/*!************************************!*\
  !*** ./js/abstract_navigatable.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractNavigatable = void 0;

var key_navigatable_js_1 = __webpack_require__(/*! ./key_navigatable.js */ "./js/key_navigatable.js");

var mouse_navigatable_js_1 = __webpack_require__(/*! ./mouse_navigatable.js */ "./js/mouse_navigatable.js");

var AbstractNavigatable = function () {
  function AbstractNavigatable() {
    this.bubble = false;
  }

  AbstractNavigatable.prototype.bubbleKey = function () {
    this.bubble = true;
  };

  AbstractNavigatable.prototype.keydown = function (event) {
    switch (event.keyCode) {
      case key_navigatable_js_1.KEY.ESCAPE:
        this.escape(event);
        break;

      case key_navigatable_js_1.KEY.RIGHT:
        this.right(event);
        break;

      case key_navigatable_js_1.KEY.LEFT:
        this.left(event);
        break;

      case key_navigatable_js_1.KEY.UP:
        this.up(event);
        break;

      case key_navigatable_js_1.KEY.DOWN:
        this.down(event);
        break;

      case key_navigatable_js_1.KEY.RETURN:
      case key_navigatable_js_1.KEY.SPACE:
        this.space(event);
        break;

      default:
        return;
    }

    this.bubble ? this.bubble = false : this.stop(event);
  };

  AbstractNavigatable.prototype.escape = function (_event) {};

  AbstractNavigatable.prototype.space = function (_event) {};

  AbstractNavigatable.prototype.left = function (_event) {};

  AbstractNavigatable.prototype.right = function (_event) {};

  AbstractNavigatable.prototype.up = function (_event) {};

  AbstractNavigatable.prototype.down = function (_event) {};

  AbstractNavigatable.prototype.stop = function (event) {
    if (event) {
      event.stopPropagation();
      event.preventDefault();
      event.cancelBubble = true;
    }
  };

  AbstractNavigatable.prototype.mousedown = function (event) {
    return this.stop(event);
  };

  AbstractNavigatable.prototype.mouseup = function (event) {
    return this.stop(event);
  };

  AbstractNavigatable.prototype.mouseover = function (event) {
    return this.stop(event);
  };

  AbstractNavigatable.prototype.mouseout = function (event) {
    return this.stop(event);
  };

  AbstractNavigatable.prototype.click = function (event) {
    return this.stop(event);
  };

  AbstractNavigatable.prototype.addEvents = function (element) {
    element.addEventListener(mouse_navigatable_js_1.MOUSE.DOWN, this.mousedown.bind(this));
    element.addEventListener(mouse_navigatable_js_1.MOUSE.UP, this.mouseup.bind(this));
    element.addEventListener(mouse_navigatable_js_1.MOUSE.OVER, this.mouseover.bind(this));
    element.addEventListener(mouse_navigatable_js_1.MOUSE.OUT, this.mouseout.bind(this));
    element.addEventListener(mouse_navigatable_js_1.MOUSE.CLICK, this.click.bind(this));
    element.addEventListener('keydown', this.keydown.bind(this));
    element.addEventListener('dragstart', this.stop.bind(this));
    element.addEventListener(mouse_navigatable_js_1.MOUSE.SELECTSTART, this.stop.bind(this));
    element.addEventListener('contextmenu', this.stop.bind(this));
    element.addEventListener(mouse_navigatable_js_1.MOUSE.DBLCLICK, this.stop.bind(this));
  };

  return AbstractNavigatable;
}();

exports.AbstractNavigatable = AbstractNavigatable;

/***/ }),

/***/ "./js/abstract_postable.js":
/*!*********************************!*\
  !*** ./js/abstract_postable.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractPostable = void 0;

var menu_element_js_1 = __webpack_require__(/*! ./menu_element.js */ "./js/menu_element.js");

var AbstractPostable = function (_super) {
  __extends(AbstractPostable, _super);

  function AbstractPostable() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.posted = false;
    return _this;
  }

  AbstractPostable.prototype.isPosted = function () {
    return this.posted;
  };

  AbstractPostable.prototype.post = function (x, y) {
    if (this.posted) {
      return;
    }

    if (typeof x !== 'undefined' && typeof y !== 'undefined') {
      this.html.setAttribute('style', 'left: ' + x + 'px; top: ' + y + 'px;');
    }

    this.display();
    this.posted = true;
  };

  AbstractPostable.prototype.unpost = function () {
    if (!this.posted) {
      return;
    }

    var html = this.html;

    if (html.parentNode) {
      html.parentNode.removeChild(html);
    }

    this.posted = false;
  };

  return AbstractPostable;
}(menu_element_js_1.MenuElement);

exports.AbstractPostable = AbstractPostable;

/***/ }),

/***/ "./js/abstract_variable_item.js":
/*!**************************************!*\
  !*** ./js/abstract_variable_item.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractVariableItem = void 0;

var abstract_item_js_1 = __webpack_require__(/*! ./abstract_item.js */ "./js/abstract_item.js");

var AbstractVariableItem = function (_super) {
  __extends(AbstractVariableItem, _super);

  function AbstractVariableItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbstractVariableItem.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;

    if (!this.span) {
      this.generateSpan();
    }

    html.appendChild(this.span);
    this.update();
  };

  AbstractVariableItem.prototype.register = function () {
    this.variable.register(this);
  };

  AbstractVariableItem.prototype.unregister = function () {
    this.variable.unregister(this);
  };

  AbstractVariableItem.prototype.update = function () {
    this.updateAria();

    if (this.span) {
      this.updateSpan();
    }
  };

  return AbstractVariableItem;
}(abstract_item_js_1.AbstractItem);

exports.AbstractVariableItem = AbstractVariableItem;

/***/ }),

/***/ "./js/close_button.js":
/*!****************************!*\
  !*** ./js/close_button.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CloseButton = void 0;

var abstract_postable_js_1 = __webpack_require__(/*! ./abstract_postable.js */ "./js/abstract_postable.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var CloseButton = function (_super) {
  __extends(CloseButton, _super);

  function CloseButton(element) {
    var _this = _super.call(this) || this;

    _this.element = element;
    _this.className = html_classes_js_1.HtmlClasses['MENUCLOSE'];
    _this.role = 'button';
    return _this;
  }

  CloseButton.prototype.generateHtml = function () {
    var html = document.createElement('span');
    html.classList.add(this.className);
    html.setAttribute('role', this.role);
    html.setAttribute('tabindex', '0');
    var content = document.createElement('span');
    content.textContent = "\xD7";
    html.appendChild(content);
    this.html = html;
  };

  CloseButton.prototype.display = function () {};

  CloseButton.prototype.unpost = function () {
    _super.prototype.unpost.call(this);

    this.element.unpost();
  };

  CloseButton.prototype.keydown = function (event) {
    this.bubbleKey();

    _super.prototype.keydown.call(this, event);
  };

  CloseButton.prototype.space = function (event) {
    this.unpost();
    this.stop(event);
  };

  CloseButton.prototype.mousedown = function (event) {
    this.unpost();
    this.stop(event);
  };

  return CloseButton;
}(abstract_postable_js_1.AbstractPostable);

exports.CloseButton = CloseButton;

/***/ }),

/***/ "./js/context_menu.js":
/*!****************************!*\
  !*** ./js/context_menu.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextMenu = void 0;

var abstract_menu_js_1 = __webpack_require__(/*! ./abstract_menu.js */ "./js/abstract_menu.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var menu_store_js_1 = __webpack_require__(/*! ./menu_store.js */ "./js/menu_store.js");

var variable_pool_js_1 = __webpack_require__(/*! ./variable_pool.js */ "./js/variable_pool.js");

var ContextMenu = function (_super) {
  __extends(ContextMenu, _super);

  function ContextMenu(factory) {
    var _this = _super.call(this) || this;

    _this.factory = factory;
    _this.id = '';
    _this.moving = false;
    _this._store = new menu_store_js_1.MenuStore(_this);
    _this.widgets = [];
    _this.variablePool = new variable_pool_js_1.VariablePool();
    return _this;
  }

  ContextMenu.fromJson = function (factory, _a) {
    var pool = _a.pool,
        items = _a.items,
        _b = _a.id,
        id = _b === void 0 ? '' : _b;
    var ctxtMenu = new this(factory);
    ctxtMenu.id = id;
    var varParser = factory.get('variable');
    pool.forEach(function (x) {
      return varParser(factory, x, ctxtMenu.pool);
    });
    var itemList = factory.get('items')(factory, items, ctxtMenu);
    ctxtMenu.items = itemList;
    return ctxtMenu;
  };

  ContextMenu.prototype.generateHtml = function () {
    if (this.isPosted()) {
      this.unpost();
    }

    _super.prototype.generateHtml.call(this);

    this._frame = document.createElement('div');

    this._frame.classList.add(html_classes_js_1.HtmlClasses['MENUFRAME']);

    var styleString = 'left: 0px; top: 0px; z-index: 200; width: 100%; ' + 'height: 100%; border: 0px; padding: 0px; margin: 0px;';

    this._frame.setAttribute('style', 'position: absolute; ' + styleString);

    var innerDiv = document.createElement('div');
    innerDiv.setAttribute('style', 'position: fixed; ' + styleString);

    this._frame.appendChild(innerDiv);

    innerDiv.addEventListener('mousedown', function (event) {
      this.unpost();
      this.unpostWidgets();
      this.stop(event);
    }.bind(this));
  };

  ContextMenu.prototype.display = function () {
    document.body.appendChild(this.frame);
    this.frame.appendChild(this.html);
    this.focus();
  };

  ContextMenu.prototype.escape = function (_event) {
    this.unpost();
    this.unpostWidgets();
  };

  ContextMenu.prototype.unpost = function () {
    _super.prototype.unpost.call(this);

    if (this.widgets.length > 0) {
      return;
    }

    this.frame.parentNode.removeChild(this.frame);
    var store = this.store;

    if (!this.moving) {
      store.insertTaborder();
    }

    store.active.focus();
  };

  ContextMenu.prototype.left = function (_event) {
    this.move_(this.store.previous());
  };

  ContextMenu.prototype.right = function (_event) {
    this.move_(this.store.next());
  };

  Object.defineProperty(ContextMenu.prototype, "frame", {
    get: function get() {
      return this._frame;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ContextMenu.prototype, "store", {
    get: function get() {
      return this._store;
    },
    enumerable: false,
    configurable: true
  });

  ContextMenu.prototype.post = function (numberOrEvent, isY) {
    if (typeof isY !== 'undefined') {
      if (!this.moving) {
        this.store.removeTaborder();
      }

      _super.prototype.post.call(this, numberOrEvent, isY);

      return;
    }

    var event = numberOrEvent;
    var node;

    if (event instanceof Event) {
      node = event.target;
      this.stop(event);
    } else {
      node = event;
    }

    var x;
    var y;

    if (event instanceof MouseEvent) {
      x = event.pageX, y = event.pageY;

      if (!x && !y && event.clientX) {
        x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
      }
    }

    if (!x && !y && node) {
      var offsetX = window.pageXOffset || document.documentElement.scrollLeft;
      var offsetY = window.pageYOffset || document.documentElement.scrollTop;
      var rect = node.getBoundingClientRect();
      x = (rect.right + rect.left) / 2 + offsetX;
      y = (rect.bottom + rect.top) / 2 + offsetY;
    }

    this.store.active = node;
    this.anchor = this.store.active;
    var menu = this.html;
    var margin = 5;

    if (x + menu.offsetWidth > document.body.offsetWidth - margin) {
      x = document.body.offsetWidth - menu.offsetWidth - margin;
    }

    this.post(x, y);
  };

  ContextMenu.prototype.registerWidget = function (widget) {
    this.widgets.push(widget);
  };

  ContextMenu.prototype.unregisterWidget = function (widget) {
    var index = this.widgets.indexOf(widget);

    if (index > -1) {
      this.widgets.splice(index, 1);
    }

    if (this.widgets.length === 0) {
      this.unpost();
    }
  };

  ContextMenu.prototype.unpostWidgets = function () {
    this.widgets.forEach(function (x) {
      return x.unpost();
    });
  };

  ContextMenu.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  ContextMenu.prototype.move_ = function (next) {
    if (this.anchor && next !== this.anchor) {
      this.moving = true;
      this.unpost();
      this.post(next);
      this.moving = false;
    }
  };

  return ContextMenu;
}(abstract_menu_js_1.AbstractMenu);

exports.ContextMenu = ContextMenu;

/***/ }),

/***/ "./js/css_util.js":
/*!************************!*\
  !*** ./js/css_util.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CssStyles = void 0;

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var CssStyles;

(function (CssStyles) {
  function makeClass_(name) {
    return '.' + (html_classes_js_1.HtmlClasses[name] || name);
  }

  var INFO_STYLES = {};
  INFO_STYLES[makeClass_('INFOCLOSE')] = '{' + '  top:.2em; right:.2em;' + '}', INFO_STYLES[makeClass_('INFOCONTENT')] = '{' + '  overflow:auto; text-align:left; font-size:80%;' + '  padding:.4em .6em; border:1px inset; margin:1em 0px;' + '  max-height:20em; max-width:30em; background-color:#EEEEEE;' + '  white-space:normal;' + '}', INFO_STYLES[makeClass_('INFO') + makeClass_('MOUSEPOST')] = '{' + 'outline:none;' + '}', INFO_STYLES[makeClass_('INFO')] = '{' + '  position:fixed; left:50%; width:auto; text-align:center;' + '  border:3px outset; padding:1em 2em; background-color:#DDDDDD;' + '  color:black;' + '  cursor:default; font-family:message-box; font-size:120%;' + '  font-style:normal; text-indent:0; text-transform:none;' + '  line-height:normal; letter-spacing:normal; word-spacing:normal;' + '  word-wrap:normal; white-space:nowrap; float:none; z-index:201;' + '  border-radius: 15px;                     /* Opera 10.5 and IE9 */' + '  -webkit-border-radius:15px;               /* Safari and Chrome */' + '  -moz-border-radius:15px;                  /* Firefox */' + '  -khtml-border-radius:15px;                /* Konqueror */' + '  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */' + '  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */' + '  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */' + '  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */' + '  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=2,' + ' OffY=2, Color="gray", Positive="true"); /* IE */' + '}';
  var MENU_STYLES = {};
  MENU_STYLES[makeClass_('MENU')] = '{' + '  position:absolute;' + '  background-color:white;' + '  color:black;' + '  width:auto; padding:5px 0px;' + '  border:1px solid #CCCCCC; margin:0; cursor:default;' + '  font: menu; text-align:left; text-indent:0; text-transform:none;' + '  line-height:normal; letter-spacing:normal; word-spacing:normal;' + '  word-wrap:normal; white-space:nowrap; float:none; z-index:201;' + '  border-radius: 5px;                     /* Opera 10.5 and IE9 */' + '  -webkit-border-radius: 5px;             /* Safari and Chrome */' + '  -moz-border-radius: 5px;                /* Firefox */' + '  -khtml-border-radius: 5px;              /* Konqueror */' + '  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */' + '  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */' + '  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */' + '  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */' + '}', MENU_STYLES[makeClass_('MENUITEM')] = '{' + '  padding: 1px 2em;' + '  background:transparent;' + '}', MENU_STYLES[makeClass_('MENUARROW')] = '{' + '  position:absolute; right:.5em; padding-top:.25em; color:#666666;' + '  font-family: null; font-size: .75em' + '}', MENU_STYLES[makeClass_('MENUACTIVE') + ' ' + makeClass_('MENUARROW')] = '{color:white}', MENU_STYLES[makeClass_('MENUARROW') + makeClass_('RTL')] = '{left:.5em; right:auto}', MENU_STYLES[makeClass_('MENUCHECK')] = '{' + '  position:absolute; left:.7em;' + '  font-family: null' + '}', MENU_STYLES[makeClass_('MENUCHECK') + makeClass_('RTL')] = '{ right:.7em; left:auto }', MENU_STYLES[makeClass_('MENURADIOCHECK')] = '{' + '  position:absolute; left: .7em;' + '}', MENU_STYLES[makeClass_('MENURADIOCHECK') + makeClass_('RTL')] = '{' + '  right: .7em; left:auto' + '}', MENU_STYLES[makeClass_('MENUINPUTBOX')] = '{' + '  padding-left: 1em; right:.5em; color:#666666;' + '  font-family: null;' + '}', MENU_STYLES[makeClass_('MENUINPUTBOX') + makeClass_('RTL')] = '{' + '  left: .1em;' + '}', MENU_STYLES[makeClass_('MENUCOMBOBOX')] = '{' + '  left:.1em; padding-bottom:.5em;' + '}', MENU_STYLES[makeClass_('MENUSLIDER')] = '{' + '  left: .1em;' + '}', MENU_STYLES[makeClass_('SLIDERVALUE')] = '{' + '  position:absolute; right:.1em; padding-top:.25em; color:#333333;' + '  font-size: .75em' + '}', MENU_STYLES[makeClass_('SLIDERBAR')] = '{' + '  outline: none; background: #d3d3d3' + '}', MENU_STYLES[makeClass_('MENULABEL')] = '{' + '  padding: 1px 2em 3px 1.33em;' + '  font-style:italic' + '}', MENU_STYLES[makeClass_('MENURULE')] = '{' + '  border-top: 1px solid #DDDDDD;' + '  margin: 4px 3px;' + '}', MENU_STYLES[makeClass_('MENUDISABLED')] = '{' + '  color:GrayText' + '}', MENU_STYLES[makeClass_('MENUACTIVE')] = '{' + '  background-color: #606872;' + '  color: white;' + '}', MENU_STYLES[makeClass_('MENUDISABLED') + ':focus'] = '{' + '  background-color: #E8E8E8' + '}', MENU_STYLES[makeClass_('MENULABEL') + ':focus'] = '{' + '  background-color: #E8E8E8' + '}', MENU_STYLES[makeClass_('CONTEXTMENU') + ':focus'] = '{' + '  outline:none' + '}', MENU_STYLES[makeClass_('CONTEXTMENU') + ' ' + makeClass_('MENUITEM') + ':focus'] = '{' + '  outline:none' + '}', MENU_STYLES[makeClass_('SELECTIONMENU')] = '{' + '  position:relative; float:left;' + '  border-bottom: none;' + ' -webkit-box-shadow:none;' + ' -webkit-border-radius:0px; ' + '}', MENU_STYLES[makeClass_('SELECTIONITEM')] = '{' + '  padding-right: 1em;' + '}', MENU_STYLES[makeClass_('SELECTION')] = '{' + '  right: 40%; width:50%; ' + '}', MENU_STYLES[makeClass_('SELECTIONBOX')] = '{' + '  padding: 0em; max-height:20em; max-width: none;' + '  background-color:#FFFFFF;' + '}', MENU_STYLES[makeClass_('SELECTIONDIVIDER')] = '{' + '  clear: both; border-top: 2px solid #000000;' + '}', MENU_STYLES[makeClass_('MENU') + ' ' + makeClass_('MENUCLOSE')] = '{' + '  top:-10px; left:-10px' + '}';
  var CLOSE_ICON_STYLES = {};
  CLOSE_ICON_STYLES[makeClass_('MENUCLOSE')] = '{' + '  position:absolute;' + '  cursor:pointer;' + '  display:inline-block;' + '  border:2px solid #AAA;' + '  border-radius:18px;' + '  -webkit-border-radius: 18px;             /* Safari and Chrome */' + '  -moz-border-radius: 18px;                /* Firefox */' + '  -khtml-border-radius: 18px;              /* Konqueror */' + '  font-family: "Courier New", Courier;' + '  font-size:24px;' + '  color:#F0F0F0' + '}', CLOSE_ICON_STYLES[makeClass_('MENUCLOSE') + ' span'] = '{' + '  display:block; background-color:#AAA; border:1.5px solid;' + '  border-radius:18px;' + '  -webkit-border-radius: 18px;             /* Safari and Chrome */' + '  -moz-border-radius: 18px;                /* Firefox */' + '  -khtml-border-radius: 18px;              /* Konqueror */' + '  line-height:0;' + '  padding:8px 0 6px     /* may need to be browser-specific */' + '}', CLOSE_ICON_STYLES[makeClass_('MENUCLOSE') + ':hover'] = '{' + '  color:white!important;' + '  border:2px solid #CCC!important' + '}', CLOSE_ICON_STYLES[makeClass_('MENUCLOSE') + ':hover span'] = '{' + '  background-color:#CCC!important' + '}', CLOSE_ICON_STYLES[makeClass_('MENUCLOSE') + ':hover:focus'] = '{' + '  outline:none' + '}';
  var INFO_ADDED = false;
  var MENU_ADDED = false;
  var CLOSE_ICON_ADDED = false;

  function addMenuStyles(opt_document) {
    if (MENU_ADDED) {
      return;
    }

    addStyles_(MENU_STYLES, opt_document);
    MENU_ADDED = true;
    addCloseIconStyles_(opt_document);
  }

  CssStyles.addMenuStyles = addMenuStyles;

  function addInfoStyles(opt_document) {
    if (INFO_ADDED) {
      return;
    }

    addStyles_(INFO_STYLES, opt_document);
    INFO_ADDED = true;
    addCloseIconStyles_(opt_document);
  }

  CssStyles.addInfoStyles = addInfoStyles;

  function addCloseIconStyles_(opt_document) {
    if (CLOSE_ICON_ADDED) {
      return;
    }

    addStyles_(CLOSE_ICON_STYLES, opt_document);
    CLOSE_ICON_ADDED = true;
  }

  function addStyles_(styles, opt_document) {
    var doc = opt_document || document;
    var element = doc.createElement('style');
    element.type = 'text/css';
    var inner = '';

    for (var style in styles) {
      inner += style;
      inner += ' ';
      inner += styles[style];
      inner += '\n';
    }

    element.innerHTML = inner;
    doc.head.appendChild(element);
  }
})(CssStyles = exports.CssStyles || (exports.CssStyles = {}));

/***/ }),

/***/ "./js/html_classes.js":
/*!****************************!*\
  !*** ./js/html_classes.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HtmlAttrs = exports.HtmlClasses = void 0;
var PREFIX = 'CtxtMenu';

function prefix_(name) {
  return PREFIX + '_' + name;
}

function prefixClass_(name) {
  return prefix_(name);
}

function prefixAttr_(name) {
  return prefix_(name);
}

exports.HtmlClasses = {
  ATTACHED: prefixClass_('Attached'),
  CONTEXTMENU: prefixClass_('ContextMenu'),
  MENU: prefixClass_('Menu'),
  MENUARROW: prefixClass_('MenuArrow'),
  MENUACTIVE: prefixClass_('MenuActive'),
  MENUCHECK: prefixClass_('MenuCheck'),
  MENUCLOSE: prefixClass_('MenuClose'),
  MENUCOMBOBOX: prefixClass_('MenuComboBox'),
  MENUDISABLED: prefixClass_('MenuDisabled'),
  MENUFRAME: prefixClass_('MenuFrame'),
  MENUITEM: prefixClass_('MenuItem'),
  MENULABEL: prefixClass_('MenuLabel'),
  MENURADIOCHECK: prefixClass_('MenuRadioCheck'),
  MENUINPUTBOX: prefixClass_('MenuInputBox'),
  MENURULE: prefixClass_('MenuRule'),
  MENUSLIDER: prefixClass_('MenuSlider'),
  MOUSEPOST: prefixClass_('MousePost'),
  RTL: prefixClass_('RTL'),
  INFO: prefixClass_('Info'),
  INFOCLOSE: prefixClass_('InfoClose'),
  INFOCONTENT: prefixClass_('InfoContent'),
  INFOSIGNATURE: prefixClass_('InfoSignature'),
  INFOTITLE: prefixClass_('InfoTitle'),
  SLIDERVALUE: prefixClass_('SliderValue'),
  SLIDERBAR: prefixClass_('SliderBar'),
  SELECTION: prefixClass_('Selection'),
  SELECTIONBOX: prefixClass_('SelectionBox'),
  SELECTIONMENU: prefixClass_('SelectionMenu'),
  SELECTIONDIVIDER: prefixClass_('SelectionDivider'),
  SELECTIONITEM: prefixClass_('SelectionItem')
};
exports.HtmlAttrs = {
  COUNTER: prefixAttr_('Counter'),
  KEYDOWNFUNC: prefixAttr_('keydownFunc'),
  CONTEXTMENUFUNC: prefixAttr_('contextmenuFunc'),
  OLDTAB: prefixAttr_('Oldtabindex'),
  TOUCHFUNC: prefixAttr_('TouchFunc')
};

/***/ }),

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParserFactory = exports.Variable = exports.SelectionBox = exports.version = exports.Parser = exports.Popup = exports.Info = exports.CssStyles = exports.ContextMenu = void 0;

var context_menu_1 = __webpack_require__(/*! ./context_menu */ "./js/context_menu.js");

var css_util_1 = __webpack_require__(/*! ./css_util */ "./js/css_util.js");

var info_1 = __webpack_require__(/*! ./info */ "./js/info.js");

var popup_1 = __webpack_require__(/*! ./popup */ "./js/popup.js");

var parse_1 = __webpack_require__(/*! ./parse */ "./js/parse.js");

var selection_box_1 = __webpack_require__(/*! ./selection_box */ "./js/selection_box.js");

var variable_1 = __webpack_require__(/*! ./variable */ "./js/variable.js");

var parser_factory_1 = __webpack_require__(/*! ./parser_factory */ "./js/parser_factory.js");

exports.ContextMenu = context_menu_1.ContextMenu;
exports.CssStyles = css_util_1.CssStyles;
exports.Info = info_1.Info;
exports.Popup = popup_1.Popup;
exports.Parser = parse_1.Parser;
exports.version = '0.4.2';
exports.SelectionBox = selection_box_1.SelectionBox;
exports.Variable = variable_1.Variable;
exports.ParserFactory = parser_factory_1.ParserFactory;

/***/ }),

/***/ "./js/info.js":
/*!********************!*\
  !*** ./js/info.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Info = void 0;

var close_button_js_1 = __webpack_require__(/*! ./close_button.js */ "./js/close_button.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var abstract_postable_js_1 = __webpack_require__(/*! ./abstract_postable.js */ "./js/abstract_postable.js");

var Info = function (_super) {
  __extends(Info, _super);

  function Info(title, content, signature) {
    var _this = _super.call(this) || this;

    _this.title = title;
    _this.signature = signature;
    _this.className = html_classes_js_1.HtmlClasses['INFO'];
    _this.role = 'dialog';
    _this.contentDiv = _this.generateContent();
    _this.close = _this.generateClose();

    _this.content = content || function () {
      return '';
    };

    return _this;
  }

  Info.prototype.attachMenu = function (menu) {
    this.menu = menu;
  };

  Info.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    html.appendChild(this.generateTitle());
    html.appendChild(this.contentDiv);
    html.appendChild(this.generateSignature());
    html.appendChild(this.close.html);
    html.setAttribute('tabindex', '0');
  };

  Info.prototype.post = function () {
    _super.prototype.post.call(this);

    var doc = document.documentElement;
    var html = this.html;
    var H = window.innerHeight || doc.clientHeight || doc.scrollHeight || 0;
    var x = Math.floor(-html.offsetWidth / 2);
    var y = Math.floor((H - html.offsetHeight) / 3);
    html.setAttribute('style', 'margin-left: ' + x + 'px; top: ' + y + 'px;');

    if (window.event instanceof MouseEvent) {
      html.classList.add(html_classes_js_1.HtmlClasses['MOUSEPOST']);
    }

    html.focus();
  };

  Info.prototype.display = function () {
    this.menu.registerWidget(this);
    this.contentDiv.innerHTML = this.content();
    var html = this.menu.html;

    if (html.parentNode) {
      html.parentNode.removeChild(html);
    }

    this.menu.frame.appendChild(this.html);
  };

  Info.prototype.click = function (_event) {};

  Info.prototype.keydown = function (event) {
    this.bubbleKey();

    _super.prototype.keydown.call(this, event);
  };

  Info.prototype.escape = function (_event) {
    this.unpost();
  };

  Info.prototype.unpost = function () {
    _super.prototype.unpost.call(this);

    this.html.classList.remove(html_classes_js_1.HtmlClasses['MOUSEPOST']);
    this.menu.unregisterWidget(this);
  };

  Info.prototype.generateClose = function () {
    var close = new close_button_js_1.CloseButton(this);
    var html = close.html;
    html.classList.add(html_classes_js_1.HtmlClasses['INFOCLOSE']);
    html.setAttribute('aria-label', 'Close Dialog Box');
    return close;
  };

  Info.prototype.generateTitle = function () {
    var span = document.createElement('span');
    span.innerHTML = this.title;
    span.classList.add(html_classes_js_1.HtmlClasses['INFOTITLE']);
    return span;
  };

  Info.prototype.generateContent = function () {
    var div = document.createElement('div');
    div.classList.add(html_classes_js_1.HtmlClasses['INFOCONTENT']);
    div.setAttribute('tabindex', '0');
    return div;
  };

  Info.prototype.generateSignature = function () {
    var span = document.createElement('span');
    span.innerHTML = this.signature;
    span.classList.add(html_classes_js_1.HtmlClasses['INFOSIGNATURE']);
    return span;
  };

  Info.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Info;
}(abstract_postable_js_1.AbstractPostable);

exports.Info = Info;

/***/ }),

/***/ "./js/item_checkbox.js":
/*!*****************************!*\
  !*** ./js/item_checkbox.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0;

var abstract_variable_item_js_1 = __webpack_require__(/*! ./abstract_variable_item.js */ "./js/abstract_variable_item.js");

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var Checkbox = function (_super) {
  __extends(Checkbox, _super);

  function Checkbox(menu, content, variable, id) {
    var _this = _super.call(this, menu, 'checkbox', content, id) || this;

    _this.role = 'menuitemcheckbox';
    _this.variable = menu.pool.lookup(variable);

    _this.register();

    return _this;
  }

  Checkbox.fromJson = function (_factory, _a, menu) {
    var content = _a.content,
        variable = _a.variable,
        id = _a.id;
    return new this(menu, content, variable, id);
  };

  Checkbox.prototype.executeAction = function () {
    this.variable.setValue(!this.variable.getValue());
    menu_util_js_1.MenuUtil.close(this);
  };

  Checkbox.prototype.generateSpan = function () {
    this.span = document.createElement('span');
    this.span.textContent = "\u2713";
    this.span.classList.add(html_classes_js_1.HtmlClasses['MENUCHECK']);
  };

  Checkbox.prototype.updateAria = function () {
    this.html.setAttribute('aria-checked', this.variable.getValue() ? 'true' : 'false');
  };

  Checkbox.prototype.updateSpan = function () {
    this.span.style.display = this.variable.getValue() ? '' : 'none';
  };

  Checkbox.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Checkbox;
}(abstract_variable_item_js_1.AbstractVariableItem);

exports.Checkbox = Checkbox;

/***/ }),

/***/ "./js/item_combo.js":
/*!**************************!*\
  !*** ./js/item_combo.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Combo = void 0;

var abstract_variable_item_js_1 = __webpack_require__(/*! ./abstract_variable_item.js */ "./js/abstract_variable_item.js");

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var key_navigatable_js_1 = __webpack_require__(/*! ./key_navigatable.js */ "./js/key_navigatable.js");

var Combo = function (_super) {
  __extends(Combo, _super);

  function Combo(menu, content, variable, id) {
    var _this = _super.call(this, menu, 'combobox', content, id) || this;

    _this.role = 'combobox';
    _this.inputEvent = false;
    _this.variable = menu.pool.lookup(variable);

    _this.register();

    return _this;
  }

  Combo.fromJson = function (_factory, _a, menu) {
    var content = _a.content,
        variable = _a.variable,
        id = _a.id;
    return new this(menu, content, variable, id);
  };

  Combo.prototype.executeAction = function () {
    this.variable.setValue(this.input.value, menu_util_js_1.MenuUtil.getActiveElement(this));
  };

  Combo.prototype.space = function (event) {
    _super.prototype.space.call(this, event);

    menu_util_js_1.MenuUtil.close(this);
  };

  Combo.prototype.focus = function () {
    _super.prototype.focus.call(this);

    this.input.focus();
  };

  Combo.prototype.unfocus = function () {
    _super.prototype.unfocus.call(this);

    this.updateSpan();
  };

  Combo.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    html.classList.add(html_classes_js_1.HtmlClasses['MENUCOMBOBOX']);
  };

  Combo.prototype.generateSpan = function () {
    this.span = document.createElement('span');
    this.span.classList.add(html_classes_js_1.HtmlClasses['MENUINPUTBOX']);
    this.input = document.createElement('input');
    this.input.addEventListener('keydown', this.inputKey.bind(this));
    this.input.setAttribute('size', '10em');
    this.input.setAttribute('type', 'text');
    this.input.setAttribute('tabindex', '-1');
    this.span.appendChild(this.input);
  };

  Combo.prototype.inputKey = function (_event) {
    this.bubbleKey();
    this.inputEvent = true;
  };

  Combo.prototype.keydown = function (event) {
    if (this.inputEvent && event.keyCode !== key_navigatable_js_1.KEY.ESCAPE && event.keyCode !== key_navigatable_js_1.KEY.RETURN) {
      this.inputEvent = false;
      event.stopPropagation();
      return;
    }

    _super.prototype.keydown.call(this, event);

    event.stopPropagation();
  };

  Combo.prototype.updateAria = function () {};

  Combo.prototype.updateSpan = function () {
    var initValue;

    try {
      initValue = this.variable.getValue(menu_util_js_1.MenuUtil.getActiveElement(this));
    } catch (e) {
      initValue = '';
    }

    this.input.value = initValue;
  };

  Combo.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Combo;
}(abstract_variable_item_js_1.AbstractVariableItem);

exports.Combo = Combo;

/***/ }),

/***/ "./js/item_command.js":
/*!****************************!*\
  !*** ./js/item_command.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Command = void 0;

var abstract_item_js_1 = __webpack_require__(/*! ./abstract_item.js */ "./js/abstract_item.js");

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var Command = function (_super) {
  __extends(Command, _super);

  function Command(menu, content, command, id) {
    var _this = _super.call(this, menu, 'command', content, id) || this;

    _this.command = command;
    return _this;
  }

  Command.fromJson = function (_factory, _a, menu) {
    var content = _a.content,
        action = _a.action,
        id = _a.id;
    return new this(menu, content, action, id);
  };

  Command.prototype.executeAction = function () {
    try {
      this.command(menu_util_js_1.MenuUtil.getActiveElement(this));
    } catch (e) {
      menu_util_js_1.MenuUtil.error(e, 'Illegal command callback.');
    }

    menu_util_js_1.MenuUtil.close(this);
  };

  Command.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Command;
}(abstract_item_js_1.AbstractItem);

exports.Command = Command;

/***/ }),

/***/ "./js/item_label.js":
/*!**************************!*\
  !*** ./js/item_label.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Label = void 0;

var abstract_item_js_1 = __webpack_require__(/*! ./abstract_item.js */ "./js/abstract_item.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var Label = function (_super) {
  __extends(Label, _super);

  function Label(menu, content, id) {
    return _super.call(this, menu, 'label', content, id) || this;
  }

  Label.fromJson = function (_factory, _a, menu) {
    var content = _a.content,
        id = _a.id;
    return new this(menu, content, id);
  };

  Label.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    html.classList.add(html_classes_js_1.HtmlClasses['MENULABEL']);
  };

  Label.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Label;
}(abstract_item_js_1.AbstractItem);

exports.Label = Label;

/***/ }),

/***/ "./js/item_radio.js":
/*!**************************!*\
  !*** ./js/item_radio.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Radio = void 0;

var abstract_variable_item_js_1 = __webpack_require__(/*! ./abstract_variable_item.js */ "./js/abstract_variable_item.js");

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var Radio = function (_super) {
  __extends(Radio, _super);

  function Radio(menu, content, variable, id) {
    var _this = _super.call(this, menu, 'radio', content, id) || this;

    _this.role = 'menuitemradio';
    _this.variable = menu.pool.lookup(variable);

    _this.register();

    return _this;
  }

  Radio.fromJson = function (_factory, _a, menu) {
    var content = _a.content,
        variable = _a.variable,
        id = _a.id;
    return new this(menu, content, variable, id);
  };

  Radio.prototype.executeAction = function () {
    this.variable.setValue(this.id);
    menu_util_js_1.MenuUtil.close(this);
  };

  Radio.prototype.generateSpan = function () {
    this.span = document.createElement('span');
    this.span.textContent = "\u2713";
    this.span.classList.add(html_classes_js_1.HtmlClasses['MENURADIOCHECK']);
  };

  Radio.prototype.updateAria = function () {
    this.html.setAttribute('aria-checked', this.variable.getValue() === this.id ? 'true' : 'false');
  };

  Radio.prototype.updateSpan = function () {
    this.span.style.display = this.variable.getValue() === this.id ? '' : 'none';
  };

  Radio.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Radio;
}(abstract_variable_item_js_1.AbstractVariableItem);

exports.Radio = Radio;

/***/ }),

/***/ "./js/item_rule.js":
/*!*************************!*\
  !*** ./js/item_rule.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rule = void 0;

var abstract_entry_js_1 = __webpack_require__(/*! ./abstract_entry.js */ "./js/abstract_entry.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var Rule = function (_super) {
  __extends(Rule, _super);

  function Rule(menu) {
    var _this = _super.call(this, menu, 'rule') || this;

    _this.className = html_classes_js_1.HtmlClasses['MENUITEM'];
    _this.role = 'separator';
    return _this;
  }

  Rule.fromJson = function (_factory, _a, menu) {
    return new this(menu);
  };

  Rule.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    html.classList.add(html_classes_js_1.HtmlClasses['MENURULE']);
    html.setAttribute('aria-orientation', 'vertical');
  };

  Rule.prototype.addEvents = function (_element) {};

  Rule.prototype.toJson = function () {
    return {
      type: 'rule'
    };
  };

  return Rule;
}(abstract_entry_js_1.AbstractEntry);

exports.Rule = Rule;

/***/ }),

/***/ "./js/item_slider.js":
/*!***************************!*\
  !*** ./js/item_slider.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;

var abstract_variable_item_js_1 = __webpack_require__(/*! ./abstract_variable_item.js */ "./js/abstract_variable_item.js");

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var key_navigatable_js_1 = __webpack_require__(/*! ./key_navigatable.js */ "./js/key_navigatable.js");

var Slider = function (_super) {
  __extends(Slider, _super);

  function Slider(menu, content, variable, id) {
    var _this = _super.call(this, menu, 'slider', content, id) || this;

    _this.role = 'slider';
    _this.labelId = 'ctx_slideLabel' + menu_util_js_1.MenuUtil.counter();
    _this.valueId = 'ctx_slideValue' + menu_util_js_1.MenuUtil.counter();
    _this.inputEvent = false;
    _this.variable = menu.pool.lookup(variable);

    _this.register();

    return _this;
  }

  Slider.fromJson = function (_factory, _a, menu) {
    var content = _a.content,
        variable = _a.variable,
        id = _a.id;
    return new this(menu, content, variable, id);
  };

  Slider.prototype.executeAction = function () {
    this.variable.setValue(this.input.value, menu_util_js_1.MenuUtil.getActiveElement(this));
    this.update();
  };

  Slider.prototype.space = function (event) {
    _super.prototype.space.call(this, event);

    menu_util_js_1.MenuUtil.close(this);
  };

  Slider.prototype.focus = function () {
    _super.prototype.focus.call(this);

    this.input.focus();
  };

  Slider.prototype.unfocus = function () {
    _super.prototype.unfocus.call(this);

    this.updateSpan();
  };

  Slider.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    html.classList.add(html_classes_js_1.HtmlClasses['MENUSLIDER']);
    this.valueSpan = document.createElement('span');
    this.valueSpan.setAttribute('id', this.valueId);
    this.valueSpan.classList.add(html_classes_js_1.HtmlClasses['SLIDERVALUE']);
    this.html.appendChild(this.valueSpan);
  };

  Slider.prototype.generateSpan = function () {
    this.span = document.createElement('span');
    this.labelSpan = document.createElement('span');
    this.labelSpan.setAttribute('id', this.labelId);
    this.labelSpan.appendChild(this.html.childNodes[0]);
    this.html.appendChild(this.labelSpan);
    this.input = document.createElement('input');
    this.input.setAttribute('type', 'range');
    this.input.setAttribute('min', '0');
    this.input.setAttribute('max', '100');
    this.input.setAttribute('aria-valuemin', '0');
    this.input.setAttribute('aria-valuemax', '100');
    this.input.setAttribute('aria-labelledby', this.labelId);
    this.input.addEventListener('keydown', this.inputKey.bind(this));
    this.input.addEventListener('input', this.executeAction.bind(this));
    this.input.classList.add(html_classes_js_1.HtmlClasses['SLIDERBAR']);
    this.span.appendChild(this.input);
  };

  Slider.prototype.inputKey = function (_event) {
    this.inputEvent = true;
  };

  Slider.prototype.mousedown = function (event) {
    event.stopPropagation();
  };

  Slider.prototype.mouseup = function (_event) {
    event.stopPropagation();
  };

  Slider.prototype.keydown = function (event) {
    var code = event.keyCode;

    if (code === key_navigatable_js_1.KEY.UP || code === key_navigatable_js_1.KEY.DOWN) {
      event.preventDefault();

      _super.prototype.keydown.call(this, event);

      return;
    }

    if (this.inputEvent && code !== key_navigatable_js_1.KEY.ESCAPE && code !== key_navigatable_js_1.KEY.RETURN) {
      this.inputEvent = false;
      event.stopPropagation();
      return;
    }

    _super.prototype.keydown.call(this, event);

    event.stopPropagation();
  };

  Slider.prototype.updateAria = function () {
    var value = this.variable.getValue();

    if (value && this.input) {
      this.input.setAttribute('aria-valuenow', value);
      this.input.setAttribute('aria-valuetext', value + '%');
    }
  };

  Slider.prototype.updateSpan = function () {
    var initValue;

    try {
      initValue = this.variable.getValue(menu_util_js_1.MenuUtil.getActiveElement(this));
      this.valueSpan.innerHTML = initValue + '%';
    } catch (e) {
      initValue = '';
    }

    this.input.value = initValue;
  };

  Slider.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Slider;
}(abstract_variable_item_js_1.AbstractVariableItem);

exports.Slider = Slider;

/***/ }),

/***/ "./js/item_submenu.js":
/*!****************************!*\
  !*** ./js/item_submenu.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Submenu = void 0;

var abstract_item_js_1 = __webpack_require__(/*! ./abstract_item.js */ "./js/abstract_item.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var Submenu = function (_super) {
  __extends(Submenu, _super);

  function Submenu(menu, content, id) {
    var _this = _super.call(this, menu, 'submenu', content, id) || this;

    _this._submenu = null;
    return _this;
  }

  Submenu.fromJson = function (factory, _a, menu) {
    var content = _a.content,
        submenu = _a.menu,
        id = _a.id;
    var item = new this(menu, content, id);
    var sm = factory.get('subMenu')(factory, submenu, item);
    item.submenu = sm;
    return item;
  };

  Object.defineProperty(Submenu.prototype, "submenu", {
    get: function get() {
      return this._submenu;
    },
    set: function set(menu) {
      this._submenu = menu;
    },
    enumerable: false,
    configurable: true
  });

  Submenu.prototype.mouseover = function (event) {
    this.focus();
    this.stop(event);
  };

  Submenu.prototype.mouseout = function (event) {
    this.stop(event);
  };

  Submenu.prototype.unfocus = function () {
    if (!this.submenu.isPosted()) {
      _super.prototype.unfocus.call(this);

      return;
    }

    if (this.menu.focused !== this) {
      _super.prototype.unfocus.call(this);

      this.menu.unpostSubmenus();
      return;
    }

    this.html.setAttribute('tabindex', '-1');
    this.html.blur();
  };

  Submenu.prototype.focus = function () {
    _super.prototype.focus.call(this);

    if (!this.submenu.isPosted() && !this.disabled) {
      this.submenu.post();
    }
  };

  Submenu.prototype.executeAction = function () {
    this.submenu.isPosted() ? this.submenu.unpost() : this.submenu.post();
  };

  Submenu.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    var html = this.html;
    this.span = document.createElement('span');
    this.span.textContent = "\u25BA";
    this.span.classList.add(html_classes_js_1.HtmlClasses['MENUARROW']);
    html.appendChild(this.span);
    html.setAttribute('aria-haspopup', 'true');
  };

  Submenu.prototype.left = function (event) {
    if (this.submenu.isPosted()) {
      this.submenu.unpost();
    } else {
      _super.prototype.left.call(this, event);
    }
  };

  Submenu.prototype.right = function (event) {
    if (!this.submenu.isPosted()) {
      this.submenu.post();
    } else {
      this.submenu.down(event);
    }
  };

  Submenu.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return Submenu;
}(abstract_item_js_1.AbstractItem);

exports.Submenu = Submenu;

/***/ }),

/***/ "./js/key_navigatable.js":
/*!*******************************!*\
  !*** ./js/key_navigatable.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KEY = void 0;
var KEY;

(function (KEY) {
  KEY[KEY["RETURN"] = 13] = "RETURN";
  KEY[KEY["ESCAPE"] = 27] = "ESCAPE";
  KEY[KEY["SPACE"] = 32] = "SPACE";
  KEY[KEY["LEFT"] = 37] = "LEFT";
  KEY[KEY["UP"] = 38] = "UP";
  KEY[KEY["RIGHT"] = 39] = "RIGHT";
  KEY[KEY["DOWN"] = 40] = "DOWN";
})(KEY = exports.KEY || (exports.KEY = {}));

/***/ }),

/***/ "./js/menu_element.js":
/*!****************************!*\
  !*** ./js/menu_element.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuElement = void 0;

var abstract_navigatable_js_1 = __webpack_require__(/*! ./abstract_navigatable.js */ "./js/abstract_navigatable.js");

var MenuElement = function (_super) {
  __extends(MenuElement, _super);

  function MenuElement() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MenuElement.prototype.addAttributes = function (attributes) {
    for (var attr in attributes) {
      this.html.setAttribute(attr, attributes[attr]);
    }
  };

  Object.defineProperty(MenuElement.prototype, "html", {
    get: function get() {
      if (!this._html) {
        this.generateHtml();
      }

      return this._html;
    },
    set: function set(html) {
      this._html = html;
      this.addEvents(html);
    },
    enumerable: false,
    configurable: true
  });

  MenuElement.prototype.generateHtml = function () {
    var html = document.createElement('div');
    html.classList.add(this.className);
    html.setAttribute('role', this.role);
    this.html = html;
  };

  MenuElement.prototype.focus = function () {
    var html = this.html;
    html.setAttribute('tabindex', '0');
    html.focus();
  };

  MenuElement.prototype.unfocus = function () {
    var html = this.html;

    if (html.hasAttribute('tabindex')) {
      html.setAttribute('tabindex', '-1');
    }

    try {
      html.blur();
    } catch (e) {}

    html.blur();
  };

  return MenuElement;
}(abstract_navigatable_js_1.AbstractNavigatable);

exports.MenuElement = MenuElement;

/***/ }),

/***/ "./js/menu_store.js":
/*!**************************!*\
  !*** ./js/menu_store.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __values = this && this.__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuStore = void 0;

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var key_navigatable_js_1 = __webpack_require__(/*! ./key_navigatable.js */ "./js/key_navigatable.js");

var MenuStore = function () {
  function MenuStore(menu) {
    this.menu = menu;
    this.store = [];
    this._active = null;
    this.counter = 0;
    this.attachedClass = html_classes_js_1.HtmlClasses['ATTACHED'] + '_' + menu_util_js_1.MenuUtil.counter();
    this.taborder = true;
    this.attrMap = {};
  }

  Object.defineProperty(MenuStore.prototype, "active", {
    get: function get() {
      return this._active;
    },
    set: function set(element) {
      do {
        if (this.store.indexOf(element) !== -1) {
          this._active = element;
          break;
        }

        element = element.parentNode;
      } while (element);
    },
    enumerable: false,
    configurable: true
  });

  MenuStore.prototype.next = function () {
    var length = this.store.length;

    if (length === 0) {
      this.active = null;
      return null;
    }

    var index = this.store.indexOf(this.active);
    index = index === -1 ? 0 : index < length - 1 ? index + 1 : 0;
    this.active = this.store[index];
    return this.active;
  };

  MenuStore.prototype.previous = function () {
    var length = this.store.length;

    if (length === 0) {
      this.active = null;
      return null;
    }

    var last = length - 1;
    var index = this.store.indexOf(this.active);
    index = index === -1 ? last : index === 0 ? last : index - 1;
    this.active = this.store[index];
    return this.active;
  };

  MenuStore.prototype.clear = function () {
    this.remove(this.store);
  };

  MenuStore.prototype.insert = function (elementOrList) {
    var e_1, _a;

    var elements = elementOrList instanceof HTMLElement ? [elementOrList] : elementOrList;

    try {
      for (var elements_1 = __values(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {
        var element = elements_1_1.value;
        this.insertElement(element);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (elements_1_1 && !elements_1_1.done && (_a = elements_1["return"])) _a.call(elements_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    this.sort();
  };

  MenuStore.prototype.remove = function (elementOrList) {
    var e_2, _a;

    var elements = elementOrList instanceof HTMLElement ? [elementOrList] : elementOrList;

    try {
      for (var elements_2 = __values(elements), elements_2_1 = elements_2.next(); !elements_2_1.done; elements_2_1 = elements_2.next()) {
        var element = elements_2_1.value;
        this.removeElement(element);
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (elements_2_1 && !elements_2_1.done && (_a = elements_2["return"])) _a.call(elements_2);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    this.sort();
  };

  MenuStore.prototype.inTaborder = function (flag) {
    if (this.taborder && !flag) {
      this.removeTaborder();
    }

    if (!this.taborder && flag) {
      this.insertTaborder();
    }

    this.taborder = flag;
  };

  MenuStore.prototype.insertTaborder = function () {
    if (this.taborder) {
      this.insertTaborder_();
    }
  };

  MenuStore.prototype.removeTaborder = function () {
    if (this.taborder) {
      this.removeTaborder_();
    }
  };

  MenuStore.prototype.insertElement = function (element) {
    if (element.classList.contains(this.attachedClass)) {
      return;
    }

    element.classList.add(this.attachedClass);

    if (this.taborder) {
      this.addTabindex(element);
    }

    this.addEvents(element);
  };

  MenuStore.prototype.removeElement = function (element) {
    if (!element.classList.contains(this.attachedClass)) {
      return;
    }

    element.classList.remove(this.attachedClass);

    if (this.taborder) {
      this.removeTabindex(element);
    }

    this.removeEvents(element);
  };

  MenuStore.prototype.sort = function () {
    var nodes = document.getElementsByClassName(this.attachedClass);
    this.store = [].slice.call(nodes);
  };

  MenuStore.prototype.insertTaborder_ = function () {
    this.store.forEach(function (x) {
      return x.setAttribute('tabindex', '0');
    });
  };

  MenuStore.prototype.removeTaborder_ = function () {
    this.store.forEach(function (x) {
      return x.setAttribute('tabindex', '-1');
    });
  };

  MenuStore.prototype.addTabindex = function (element) {
    if (element.hasAttribute('tabindex')) {
      element.setAttribute(html_classes_js_1.HtmlAttrs['OLDTAB'], element.getAttribute('tabindex'));
    }

    element.setAttribute('tabindex', '0');
  };

  MenuStore.prototype.removeTabindex = function (element) {
    if (element.hasAttribute(html_classes_js_1.HtmlAttrs['OLDTAB'])) {
      element.setAttribute('tabindex', element.getAttribute(html_classes_js_1.HtmlAttrs['OLDTAB']));
      element.removeAttribute(html_classes_js_1.HtmlAttrs['OLDTAB']);
    } else {
      element.removeAttribute('tabindex');
    }
  };

  MenuStore.prototype.addEvents = function (element) {
    if (element.hasAttribute(html_classes_js_1.HtmlAttrs['COUNTER'])) {
      return;
    }

    this.addEvent(element, 'contextmenu', this.menu.post.bind(this.menu));
    this.addEvent(element, 'keydown', this.keydown.bind(this));
    element.setAttribute(html_classes_js_1.HtmlAttrs['COUNTER'], this.counter.toString());
    this.counter++;
  };

  MenuStore.prototype.addEvent = function (element, name, func) {
    var attrName = html_classes_js_1.HtmlAttrs[name.toUpperCase() + 'FUNC'];
    this.attrMap[attrName + this.counter] = func;
    element.addEventListener(name, func);
  };

  MenuStore.prototype.removeEvents = function (element) {
    if (!element.hasAttribute(html_classes_js_1.HtmlAttrs['COUNTER'])) {
      return;
    }

    var counter = element.getAttribute(html_classes_js_1.HtmlAttrs['COUNTER']);
    this.removeEvent(element, 'contextmenu', counter);
    this.removeEvent(element, 'keydown', counter);
    element.removeAttribute(html_classes_js_1.HtmlAttrs['COUNTER']);
  };

  MenuStore.prototype.removeEvent = function (element, name, counter) {
    var attrName = html_classes_js_1.HtmlAttrs[name.toUpperCase() + 'FUNC'];
    var menuFunc = this.attrMap[attrName + counter];
    element.removeEventListener(name, menuFunc);
  };

  MenuStore.prototype.keydown = function (event) {
    if (event.keyCode === key_navigatable_js_1.KEY.SPACE) {
      this.menu.post(event);
      event.preventDefault();
      event.stopImmediatePropagation();
    }
  };

  return MenuStore;
}();

exports.MenuStore = MenuStore;

/***/ }),

/***/ "./js/menu_util.js":
/*!*************************!*\
  !*** ./js/menu_util.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuUtil = void 0;
var MenuUtil;

(function (MenuUtil) {
  function close(item) {
    var menu = item.menu;

    if (menu.baseMenu) {
      menu.baseMenu.unpost();
    } else {
      menu.unpost();
    }
  }

  MenuUtil.close = close;

  function getActiveElement(item) {
    var menu = item.menu;
    var baseMenu = menu.baseMenu ? menu.baseMenu : menu;
    return baseMenu.store.active;
  }

  MenuUtil.getActiveElement = getActiveElement;

  function error(_error, msg) {
    console.error('ContextMenu Error: ' + msg);
  }

  MenuUtil.error = error;

  function counter() {
    return count++;
  }

  MenuUtil.counter = counter;
  var count = 0;
})(MenuUtil = exports.MenuUtil || (exports.MenuUtil = {}));

/***/ }),

/***/ "./js/mouse_navigatable.js":
/*!*********************************!*\
  !*** ./js/mouse_navigatable.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MOUSE = void 0;
exports.MOUSE = {
  CLICK: 'click',
  DBLCLICK: 'dblclick',
  DOWN: 'mousedown',
  UP: 'mouseup',
  OVER: 'mouseover',
  OUT: 'mouseout',
  MOVE: 'mousemove',
  SELECTEND: 'selectend',
  SELECTSTART: 'selectstart'
};

/***/ }),

/***/ "./js/parse.js":
/*!*********************!*\
  !*** ./js/parse.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

var __values = this && this.__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

var __spread = this && this.__spread || function () {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }

  return ar;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;

var item_command_js_1 = __webpack_require__(/*! ./item_command.js */ "./js/item_command.js");

var context_menu_js_1 = __webpack_require__(/*! ./context_menu.js */ "./js/context_menu.js");

var variable_js_1 = __webpack_require__(/*! ./variable.js */ "./js/variable.js");

var item_checkbox_js_1 = __webpack_require__(/*! ./item_checkbox.js */ "./js/item_checkbox.js");

var item_combo_js_1 = __webpack_require__(/*! ./item_combo.js */ "./js/item_combo.js");

var item_label_js_1 = __webpack_require__(/*! ./item_label.js */ "./js/item_label.js");

var item_radio_js_1 = __webpack_require__(/*! ./item_radio.js */ "./js/item_radio.js");

var item_submenu_js_1 = __webpack_require__(/*! ./item_submenu.js */ "./js/item_submenu.js");

var item_rule_js_1 = __webpack_require__(/*! ./item_rule.js */ "./js/item_rule.js");

var item_slider_js_1 = __webpack_require__(/*! ./item_slider.js */ "./js/item_slider.js");

var sub_menu_js_1 = __webpack_require__(/*! ./sub_menu.js */ "./js/sub_menu.js");

var selection_box_js_1 = __webpack_require__(/*! ./selection_box.js */ "./js/selection_box.js");

var parser_factory_js_1 = __webpack_require__(/*! ./parser_factory.js */ "./js/parser_factory.js");

var Parser = function () {
  function Parser(init) {
    var _this = this;

    if (init === void 0) {
      init = [];
    }

    this._initList = [['command', item_command_js_1.Command.fromJson.bind(item_command_js_1.Command)], ['checkbox', item_checkbox_js_1.Checkbox.fromJson.bind(item_checkbox_js_1.Checkbox)], ['combo', item_combo_js_1.Combo.fromJson.bind(item_combo_js_1.Combo)], ['slider', item_slider_js_1.Slider.fromJson.bind(item_slider_js_1.Slider)], ['label', item_label_js_1.Label.fromJson.bind(item_label_js_1.Label)], ['radio', item_radio_js_1.Radio.fromJson.bind(item_radio_js_1.Radio)], ['rule', item_rule_js_1.Rule.fromJson.bind(item_rule_js_1.Rule)], ['submenu', item_submenu_js_1.Submenu.fromJson.bind(item_submenu_js_1.Submenu)], ['contextMenu', context_menu_js_1.ContextMenu.fromJson.bind(context_menu_js_1.ContextMenu)], ['subMenu', sub_menu_js_1.SubMenu.fromJson.bind(sub_menu_js_1.SubMenu)], ['variable', variable_js_1.Variable.fromJson.bind(variable_js_1.Variable)], ['items', this.items.bind(this)], ['selectionMenu', selection_box_js_1.SelectionMenu.fromJson.bind(selection_box_js_1.SelectionMenu)], ['selectionBox', selection_box_js_1.SelectionBox.fromJson.bind(selection_box_js_1.SelectionBox)]];
    this._factory = new parser_factory_js_1.ParserFactory(this._initList);
    init.forEach(function (_a) {
      var _b = __read(_a, 2),
          x = _b[0],
          y = _b[1];

      return _this.factory.add(x, y);
    });
  }

  Object.defineProperty(Parser.prototype, "factory", {
    get: function get() {
      return this._factory;
    },
    enumerable: false,
    configurable: true
  });

  Parser.prototype.items = function (_factory, its, ctxt) {
    var e_1, _a;

    var hidden = [];

    try {
      for (var its_1 = __values(its), its_1_1 = its_1.next(); !its_1_1.done; its_1_1 = its_1.next()) {
        var item = its_1_1.value;
        var entry = this.parse(item, ctxt);

        if (!entry) {
          continue;
        }

        ctxt.items.push(entry);

        if (item.disabled) {
          entry.disable();
        }

        if (item.hidden) {
          hidden.push(entry);
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (its_1_1 && !its_1_1.done && (_a = its_1["return"])) _a.call(its_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    hidden.forEach(function (x) {
      return x.hide();
    });
    return ctxt.items;
  };

  Parser.prototype.parse = function (_a) {
    var rest = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      rest[_i - 1] = arguments[_i];
    }

    var kind = _a.type,
        json = __rest(_a, ["type"]);

    var func = this.factory.get(kind);
    return func ? func.apply(void 0, __spread([this.factory, json], rest)) : null;
  };

  return Parser;
}();

exports.Parser = Parser;

/***/ }),

/***/ "./js/parser_factory.js":
/*!******************************!*\
  !*** ./js/parser_factory.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParserFactory = void 0;

var ParserFactory = function () {
  function ParserFactory(init) {
    this._parser = new Map(init);
  }

  ParserFactory.prototype.get = function (name) {
    return this._parser.get(name);
  };

  ParserFactory.prototype.add = function (name, method) {
    this._parser.set(name, method);
  };

  return ParserFactory;
}();

exports.ParserFactory = ParserFactory;

/***/ }),

/***/ "./js/popup.js":
/*!*********************!*\
  !*** ./js/popup.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popup = void 0;

var abstract_postable_js_1 = __webpack_require__(/*! ./abstract_postable.js */ "./js/abstract_postable.js");

var Popup = function (_super) {
  __extends(Popup, _super);

  function Popup(title, content) {
    var _this = _super.call(this) || this;

    _this.title = title;
    _this.window = null;
    _this.localSettings = {
      left: Math.round((screen.width - 400) / 2),
      top: Math.round((screen.height - 300) / 3)
    };
    _this.windowList = [];
    _this.mobileFlag = false;
    _this.active = null;

    _this.content = content || function () {
      return '';
    };

    return _this;
  }

  Popup.fromJson = function () {};

  Popup.prototype.attachMenu = function (menu) {
    this.menu = menu;
  };

  Popup.prototype.post = function () {
    this.display();
  };

  Popup.prototype.display = function () {
    this.active = this.menu.store.active;
    var settings = [];

    for (var setting in Popup.popupSettings) {
      settings.push(setting + '=' + Popup.popupSettings[setting]);
    }

    for (var setting in this.localSettings) {
      settings.push(setting + '=' + this.localSettings[setting]);
    }

    this.window = window.open('', '_blank', settings.join(','));
    this.windowList.push(this.window);
    var doc = this.window.document;

    if (this.mobileFlag) {
      doc.open();
      doc.write('<html><head><meta name="viewport" ' + 'content="width=device-width, initial-scale=1.0" /><title>' + this.title + '</title></head><body style="font-size:85%">');
      doc.write('<pre>' + this.generateContent() + '</pre>');
      doc.write('<hr><input type="button" value="' + 'Close' + '" onclick="window.close()" />');
      doc.write('</body></html>');
      doc.close();
    } else {
      doc.open();
      doc.write('<html><head><title>' + this.title + '</title></head><body style="font-size:85%">');
      doc.write('<table><tr><td><pre>' + this.generateContent() + '</pre></td></tr></table>');
      doc.write('</body></html>');
      doc.close();
      setTimeout(this.resize.bind(this), 50);
    }
  };

  Popup.prototype.unpost = function () {
    this.windowList.forEach(function (x) {
      return x.close();
    });
    this.window = null;
  };

  Popup.prototype.generateContent = function () {
    return this.content(this.active);
  };

  Popup.prototype.resize = function () {
    var table = this.window.document.body.firstChild;
    var H = this.window.outerHeight - this.window.innerHeight || 30;
    var W = this.window.outerWidth - this.window.innerWidth || 30;
    W = Math.max(140, Math.min(Math.floor(.5 * this.window.screen.width), table.offsetWidth + W + 25));
    H = Math.max(40, Math.min(Math.floor(.5 * this.window.screen.height), table.offsetHeight + H + 25));
    this.window.resizeTo(W, H);
    var bb = this.active.getBoundingClientRect();

    if (bb) {
      var x = Math.max(0, Math.min(bb.right - Math.floor(W / 2), this.window.screen.width - W - 20));
      var y = Math.max(0, Math.min(bb.bottom - Math.floor(H / 2), this.window.screen.height - H - 20));
      this.window.moveTo(x, y);
    }

    this.active = null;
  };

  Popup.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  Popup.popupSettings = {
    status: 'no',
    toolbar: 'no',
    locationbar: 'no',
    menubar: 'no',
    directories: 'no',
    personalbar: 'no',
    resizable: 'yes',
    scrollbars: 'yes',
    width: 400,
    height: 300
  };
  return Popup;
}(abstract_postable_js_1.AbstractPostable);

exports.Popup = Popup;

/***/ }),

/***/ "./js/selection_box.js":
/*!*****************************!*\
  !*** ./js/selection_box.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectionBox = exports.SelectionMenu = void 0;

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var html_classes_js_1 = __webpack_require__(/*! ./html_classes.js */ "./js/html_classes.js");

var abstract_menu_js_1 = __webpack_require__(/*! ./abstract_menu.js */ "./js/abstract_menu.js");

var info_js_1 = __webpack_require__(/*! ./info.js */ "./js/info.js");

var SelectionMenu = function (_super) {
  __extends(SelectionMenu, _super);

  function SelectionMenu(anchor) {
    var _this = _super.call(this) || this;

    _this.anchor = anchor;
    _this.className = html_classes_js_1.HtmlClasses['SELECTIONMENU'];
    _this.variablePool = _this.anchor.menu.pool;
    _this.baseMenu = _this.anchor.menu;
    return _this;
  }

  SelectionMenu.fromJson = function (factory, _a, sb) {
    var title = _a.title,
        values = _a.values,
        variable = _a.variable;
    var selection = new this(sb);
    var tit = factory.get('label')(factory, {
      content: title || '',
      id: title || 'id'
    }, selection);
    var rul = factory.get('rule')(factory, {}, selection);
    var radios = values.map(function (x) {
      return factory.get('radio')(factory, {
        content: x,
        variable: variable,
        id: x
      }, selection);
    });
    var items = [tit, rul].concat(radios);
    selection.items = items;
    return selection;
  };

  SelectionMenu.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    this.items.forEach(function (item) {
      return item.html.classList.add(html_classes_js_1.HtmlClasses['SELECTIONITEM']);
    });
  };

  SelectionMenu.prototype.display = function () {};

  SelectionMenu.prototype.right = function (event) {
    this.anchor.right(event);
  };

  SelectionMenu.prototype.left = function (event) {
    this.anchor.left(event);
  };

  return SelectionMenu;
}(abstract_menu_js_1.AbstractMenu);

exports.SelectionMenu = SelectionMenu;

var SelectionBox = function (_super) {
  __extends(SelectionBox, _super);

  function SelectionBox(title, signature, style, grid) {
    if (style === void 0) {
      style = "none";
    }

    if (grid === void 0) {
      grid = "vertical";
    }

    var _this = _super.call(this, title, null, signature) || this;

    _this.style = style;
    _this.grid = grid;
    _this._selections = [];
    _this.prefix = 'ctxt-selection';
    _this._balanced = true;
    return _this;
  }

  SelectionBox.fromJson = function (factory, _a, ctxt) {
    var title = _a.title,
        signature = _a.signature,
        selections = _a.selections,
        order = _a.order,
        grid = _a.grid;
    console.log(grid);
    console.log(order);
    var sb = new this(title, signature, order, grid);
    sb.attachMenu(ctxt);
    var sels = selections.map(function (x) {
      return factory.get('selectionMenu')(factory, x, sb);
    });
    sb.selections = sels;
    return sb;
  };

  SelectionBox.prototype.attachMenu = function (menu) {
    this.menu = menu;
  };

  Object.defineProperty(SelectionBox.prototype, "selections", {
    get: function get() {
      return this._selections;
    },
    set: function set(selections) {
      var _this = this;

      this._selections = [];
      selections.forEach(function (x) {
        return _this.addSelection(x);
      });
    },
    enumerable: false,
    configurable: true
  });

  SelectionBox.prototype.addSelection = function (selection) {
    selection.anchor = this;

    this._selections.push(selection);
  };

  SelectionBox.prototype.rowDiv = function (sels) {
    var _this = this;

    var div = document.createElement('div');
    this.contentDiv.appendChild(div);
    var rects = sels.map(function (sel) {
      div.appendChild(sel.html);

      if (!sel.html.id) {
        sel.html.id = _this.prefix + menu_util_js_1.MenuUtil.counter();
      }

      return sel.html.getBoundingClientRect();
    });
    var column = rects.map(function (x) {
      return x.width;
    });
    var width = column.reduce(function (x, y) {
      return x + y;
    }, 0);
    var height = rects.reduce(function (x, y) {
      return Math.max(x, y.height);
    }, 0);
    div.classList.add(html_classes_js_1.HtmlClasses['SELECTIONDIVIDER']);
    div.setAttribute('style', 'height: ' + height + 'px;');
    return [div, width, height, column];
  };

  SelectionBox.prototype.display = function () {
    _super.prototype.display.call(this);

    this.order();

    if (!this.selections.length) {
      return;
    }

    var outerDivs = [];
    var maxWidth = 0;
    var balancedColumn = [];
    var chunks = this.getChunkSize(this.selections.length);

    var _loop_1 = function _loop_1(i) {
      var sels = this_1.selections.slice(i, i + chunks);

      var _a = __read(this_1.rowDiv(sels), 4),
          div = _a[0],
          width = _a[1],
          height = _a[2],
          column = _a[3];

      outerDivs.push(div);
      maxWidth = Math.max(maxWidth, width);
      sels.forEach(function (sel) {
        return sel.html.style.height = height + 'px';
      });
      balancedColumn = this_1.combineColumn(balancedColumn, column);
    };

    var this_1 = this;

    for (var i = 0; i < this.selections.length; i += chunks) {
      _loop_1(i);
    }

    if (this._balanced) {
      this.balanceColumn(outerDivs, balancedColumn);
      maxWidth = balancedColumn.reduce(function (x, y) {
        return x + y;
      }, 20);
    }

    outerDivs.forEach(function (div) {
      return div.style.width = maxWidth + 'px';
    });
  };

  SelectionBox.prototype.getChunkSize = function (size) {
    switch (this.grid) {
      case "square":
        return Math.floor(Math.sqrt(size));

      case "horizontal":
        return size / SelectionBox.chunkSize;

      case "vertical":
      default:
        return SelectionBox.chunkSize;
    }
  };

  SelectionBox.prototype.balanceColumn = function (divs, column) {
    divs.forEach(function (div) {
      var children = Array.from(div.children);

      for (var i = 0, child = void 0; child = children[i]; i++) {
        child.style.width = column[i] + 'px';
      }
    });
  };

  SelectionBox.prototype.combineColumn = function (col1, col2) {
    var result = [];
    var i = 0;

    while (col1[i] || col2[i]) {
      if (!col1[i]) {
        result = result.concat(col2.slice(i));
        break;
      }

      if (!col2[i]) {
        result = result.concat(col1.slice(i));
        break;
      }

      result.push(Math.max(col1[i], col2[i]));
      i++;
    }

    ;
    return result;
  };

  SelectionBox.prototype.left = function (event) {
    var _this = this;

    this.move(event, function (index) {
      return (index === 0 ? _this.selections.length : index) - 1;
    });
  };

  SelectionBox.prototype.right = function (event) {
    var _this = this;

    this.move(event, function (index) {
      return index === _this.selections.length - 1 ? 0 : index + 1;
    });
  };

  SelectionBox.prototype.generateHtml = function () {
    _super.prototype.generateHtml.call(this);

    this.html.classList.add(html_classes_js_1.HtmlClasses['SELECTION']);
  };

  SelectionBox.prototype.generateContent = function () {
    var div = _super.prototype.generateContent.call(this);

    div.classList.add(html_classes_js_1.HtmlClasses['SELECTIONBOX']);
    div.removeAttribute('tabindex');
    return div;
  };

  SelectionBox.prototype.findSelection = function (event) {
    var target = event.target;
    var selection = null;

    if (target.id) {
      selection = this.selections.find(function (x) {
        return x.html.id === target.id;
      });
    }

    if (!selection) {
      var id_1 = target.parentElement.id;
      selection = this.selections.find(function (x) {
        return x.html.id === id_1;
      });
    }

    return selection;
  };

  SelectionBox.prototype.move = function (event, isNext) {
    var selection = this.findSelection(event);

    if (selection.focused) {
      selection.focused.unfocus();
    }

    var index = this.selections.indexOf(selection);
    var next = isNext(index);
    this.selections[next].focus();
  };

  SelectionBox.prototype.order = function () {
    this.selections.sort(SelectionBox.orderMethod.get(this.style));
  };

  SelectionBox.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  SelectionBox.chunkSize = 4;
  SelectionBox.orderMethod = new Map([["alphabetical", function (x, y) {
    return x.items[0].content.localeCompare(y.items[0].content);
  }], ["none", function (_x, _y) {
    return 1;
  }], ["decreasing", function (x, y) {
    var xl = x.items.length;
    var yl = y.items.length;
    return xl < yl ? 1 : yl < xl ? -1 : 0;
  }], ["increasing", function (x, y) {
    var xl = x.items.length;
    var yl = y.items.length;
    return xl < yl ? -1 : yl < xl ? 1 : 0;
  }]]);
  return SelectionBox;
}(info_js_1.Info);

exports.SelectionBox = SelectionBox;

/***/ }),

/***/ "./js/sub_menu.js":
/*!************************!*\
  !*** ./js/sub_menu.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubMenu = void 0;

var abstract_menu_js_1 = __webpack_require__(/*! ./abstract_menu.js */ "./js/abstract_menu.js");

var SubMenu = function (_super) {
  __extends(SubMenu, _super);

  function SubMenu(_anchor) {
    var _this = _super.call(this) || this;

    _this._anchor = _anchor;
    _this.variablePool = _this.anchor.menu.pool;

    _this.setBaseMenu();

    return _this;
  }

  SubMenu.fromJson = function (factory, _a, anchor) {
    var its = _a.items;
    var submenu = new this(anchor);
    var itemList = factory.get('items')(factory, its, submenu);
    submenu.items = itemList;
    return submenu;
  };

  Object.defineProperty(SubMenu.prototype, "anchor", {
    get: function get() {
      return this._anchor;
    },
    enumerable: false,
    configurable: true
  });

  SubMenu.prototype.post = function () {
    if (!this.anchor.menu.isPosted()) {
      return;
    }

    var mobileFlag = false;
    var rtlFlag = false;
    var margin = 5;
    var parent = this.anchor.html;
    var menu = this.html;
    var base = this.baseMenu.frame;
    var mw = parent.offsetWidth;
    var x = mobileFlag ? 30 : mw - 2;
    var y = 0;

    while (parent && parent !== base) {
      x += parent.offsetLeft;
      y += parent.offsetTop;
      parent = parent.parentNode;
    }

    if (!mobileFlag) {
      if (rtlFlag && x - mw - menu.offsetWidth > margin || !rtlFlag && x + menu.offsetWidth > document.body.offsetWidth - margin) {
        x = Math.max(margin, x - mw - menu.offsetWidth + 6);
      }
    }

    _super.prototype.post.call(this, x, y);
  };

  SubMenu.prototype.display = function () {
    this.baseMenu.frame.appendChild(this.html);
  };

  SubMenu.prototype.setBaseMenu = function () {
    var menu = this;

    do {
      menu = menu.anchor.menu;
    } while (menu instanceof SubMenu);

    this.baseMenu = menu;
  };

  SubMenu.prototype.left = function (_event) {
    this.focused = null;
    this.anchor.focus();
  };

  SubMenu.prototype.toJson = function () {
    return {
      type: ''
    };
  };

  return SubMenu;
}(abstract_menu_js_1.AbstractMenu);

exports.SubMenu = SubMenu;

/***/ }),

/***/ "./js/variable.js":
/*!************************!*\
  !*** ./js/variable.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Variable = void 0;

var menu_util_js_1 = __webpack_require__(/*! ./menu_util.js */ "./js/menu_util.js");

var Variable = function () {
  function Variable(_name, getter, setter) {
    this._name = _name;
    this.getter = getter;
    this.setter = setter;
    this.items = [];
  }

  Variable.fromJson = function (_factory, _a, pool) {
    var name = _a.name,
        getter = _a.getter,
        setter = _a.setter;
    var variable = new this(name, getter, setter);
    pool.insert(variable);
  };

  Object.defineProperty(Variable.prototype, "name", {
    get: function get() {
      return this._name;
    },
    enumerable: false,
    configurable: true
  });

  Variable.prototype.getValue = function (node) {
    try {
      return this.getter(node);
    } catch (e) {
      menu_util_js_1.MenuUtil.error(e, 'Command of variable ' + this.name + ' failed.');
      return null;
    }
  };

  Variable.prototype.setValue = function (value, node) {
    try {
      this.setter(value, node);
    } catch (e) {
      menu_util_js_1.MenuUtil.error(e, 'Command of variable ' + this.name + ' failed.');
    }

    this.update();
  };

  Variable.prototype.register = function (item) {
    if (this.items.indexOf(item) === -1) {
      this.items.push(item);
    }
  };

  Variable.prototype.unregister = function (item) {
    var index = this.items.indexOf(item);

    if (index !== -1) {
      this.items.splice(index, 1);
    }
  };

  Variable.prototype.update = function () {
    this.items.forEach(function (x) {
      return x.update();
    });
  };

  Variable.prototype.registerCallback = function (func) {
    this.items.forEach(function (x) {
      return x.registerCallback(func);
    });
  };

  Variable.prototype.unregisterCallback = function (func) {
    this.items.forEach(function (x) {
      return x.unregisterCallback(func);
    });
  };

  Variable.prototype.toJson = function () {
    return {
      type: 'variable',
      name: this.name,
      getter: this.getter.toString(),
      setter: this.setter.toString()
    };
  };

  return Variable;
}();

exports.Variable = Variable;

/***/ }),

/***/ "./js/variable_pool.js":
/*!*****************************!*\
  !*** ./js/variable_pool.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariablePool = void 0;

var VariablePool = function () {
  function VariablePool() {
    this.pool = {};
  }

  VariablePool.prototype.insert = function (variable) {
    this.pool[variable.name] = variable;
  };

  VariablePool.prototype.lookup = function (name) {
    return this.pool[name];
  };

  VariablePool.prototype.remove = function (name) {
    delete this.pool[name];
  };

  VariablePool.prototype.update = function () {
    for (var variable in this.pool) {
      this.pool[variable].update();
    }
  };

  return VariablePool;
}();

exports.VariablePool = VariablePool;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,